This lab helped me understand about cache replacement algorithms in depth. I had studied about the Least Replacement Algorithm, First In First Out Algorithm and Optimal Future Checking Algorithm. We also got a chance to create a custom algorithm that was faster than LRU. In LRU I learned that a rule used in a paging system which selects a page to be paged out if it has been used (read or written) less recently than any other page. That mean the same rule may also be used in a cache to select which cache entry to flush. In FIFO, I learned that the simplest page replacement algorithm. In this algorithm, operating system keeps track of all pages in the memory in a queue and the oldest page is in the front of the queue. When a page needs to be replaced page in the front of the queue is selected for removal. In OPT algorithm, I learned that when a page needs to be swapped in, the operating system swaps out the page whose next use will occur farthest in the future. For example, a page that is not going to be used for the next 6 seconds will be swapped out over a page that is going to be used within the next 0.4 seconds. Finally, for my custom algorithm, I used the concept of Not recently used algorithm which is somewhat similar to LRU. The NRU favors keeping pages in memory that have been recently used. This algorithm works on the following principle which that when a page is referenced then a referenced bit is set for that page and it is the marked as referenced. Similarly, when a page is modified, a modified bit is set. Overall, I would say that I learned a lot practically by implementing these algorithms than by just studying the algorithm in theory in class.
